// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  name          String
  phone         String
  role          Role             @default(USER)
  status        Status           @default(ACTIVE)
  password      String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  works         Works[]
  audiLog       AuditLog[]
  assignedWorks WorkTechnician[] // trabajos que le asignaron como técnico
  StepsToWork   StepsToWork[]
}

model Works {
  id                String           @id @default(uuid())
  workCode          String           @unique
  description       String?
  finalObservations String?
  progress          StatusProgress   @default(NOT_STARTED)
  images            ImagesWorks[]
  createdAt         DateTime         @default(now())
  status            Status           @default(ACTIVE)
  stepsToWork       StepsToWork[]
  startedAt         DateTime?
  finishedAt        DateTime?
  updatedAt         DateTime         @updatedAt
  User              User?            @relation(fields: [userId], references: [id])
  userId            String?
  company           Company?         @relation(fields: [companyId], references: [id])
  companyId         String
  technicians       WorkTechnician[]
}

model WorkTechnician {
  work   Works  @relation(fields: [workId], references: [id])
  workId String

  technician   User   @relation(fields: [technicianId], references: [id])
  technicianId String

  assignedAt DateTime @default(now()) // opcional: para saber cuándo se asignó

  @@id([workId, technicianId])
}

model StepsToWork {
  id               String             @id @default(uuid())
  order            Int
  description      String
  Works            Works?             @relation(fields: [worksId], references: [id])
  worksId          String
  user             User?              @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ImagesStepToWork ImagesStepToWork[]
  @@unique([worksId, description])
}

model ImagesStepToWork {
  id            String       @id @default(uuid())
  url           String
  StepsToWork   StepsToWork? @relation(fields: [stepsToWorkId], references: [id])
  stepsToWorkId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ImagesWorks {
  id        String   @id @default(uuid())
  url       String
  Works     Works?   @relation(fields: [worksId], references: [id])
  worksId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clients {
  id        String    @id @default(uuid())
  name      String
  phone     String
  email     String    @unique
  rut       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  company   Company[]
  status    Status    @default(ACTIVE)
}

model Company {
  id           String   @id @default(uuid())
  rut          String   @unique
  companyName  String
  location     String
  email        String?
  phone        String?
  observations String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Clients      Clients? @relation(fields: [clientsId], references: [id])
  clientsId    String
  status       Status   @default(ACTIVE)
  works        Works[]
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String // Descripción de la acción, por ejemplo: "LOGIN", "EDIT", "DELETE"
  timestamp DateTime @default(now()) // Fecha y hora del evento
  metadata  Json? // Información adicional, como datos del cambio o la IP del usuario 
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

enum Role {
  USER
  ADMIN
  TECHNICIAN
  CLIENT
}

enum StatusProgress {
  IN_PROGRESS
  FINISHED
  NOT_STARTED
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}
